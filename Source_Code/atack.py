import random
import numpy as np
import pickle
from colorama import Fore
from testModel import testModel
xTrain = np.load('result/xTrain.npy')
xTest = np.load('result/xTest.npy')
yTest = np.load('result/yTest.npy')
eclf2 = pickle.load(open('result/eclf2.sav', 'rb'))
def splitMalwerAndBenign():
    benign = []
    malwares = []
    for i in range(len(xTest)):
        if yTest[i] == 1:
            malwares.append(xTest[i])
        else:
            benign.append(xTest[i])

    benign = np.array(benign)
    malwares = np.array(malwares)
    return benign, malwares
def predcit5Times(app):
    for i in range(5):
        score = eclf2.predict(app)[0]
        print(f'Test sample {i} score: {score*100:.2f}% Malwer')

benign, malwares = splitMalwerAndBenign()
y_malwares = np.ones(malwares.shape[0])
# app = malwer[0].reshape(1,-1)
# print(f'Orignal Score: {eclf2.predict(app)[0]*100:.2f}% Malwer')
def averageVector(X):
    res = np.zeros(X.shape[1])
    for i in range(X.shape[0]):
        for j in range(X.shape[1]):
            res[j] += X[i][j]
    
    for i in range(X.shape[1]):
        res[i] //=  X.shape[0]
    return res
averageApp = averageVector(benign)
"""-----עכשיו זה הקוד המגניב-----"""
#This is the implementation of the "first attack"
def ZK_attack(test_files):
    for i in range(test_files.shape[0]):
        for j in range(302):
            ind = random.randint(0, test_files.shape[1]-1)
            f_ind = ind
            s_ind = test_files.shape[1]-1-ind
            # swap test_files[i, f_ind] and test_files[i, s_ind]
            tmp = test_files[i, f_ind]
            test_files[i, f_ind] = test_files[i, s_ind]
            test_files[i, s_ind] = tmp
    return test_files
#This is the implementation of the "second attack"
def BB_attack(test_files,eclf2):
    for i in range(test_files.shape[0]):
        # print(f'{i} from {test_files.shape[0]}')
        for j in range(302):
            try:
                row = test_files[i,:]
                ind = random.randint(0, test_files.shape[1]-1)
                f_ind = ind
                s_ind = test_files.shape[1]-1-ind
                temp = row[f_ind]
                row[f_ind] = row[s_ind]
                row[s_ind] = temp
                pred = eclf2.predict(row.reshape(1,-1))
                if pred != 1:
                    test_files[i, :] = row
                    break
            except Exception as e:
                print(i)
                print(e)
                exit(0)
    return test_files
#This is the implementation of the "third attack"
def WB_attack(test_files,clf,X_train):       
    while(1):
        try:
            samp_indices = random.sample(range(X_train.shape[0]), test_files.shape[0])
            samp = X_train[samp_indices]
            pred = clf.predict(samp)
            if (pred==1).mean() <= 0.1:
                return samp
        except Exception as e:
            print(e)
            exit(0)      
    return test_files

def Our_Attack(test_files, averageVector):
    for i in range(test_files.shape[0]):
        for j in range(test_files.shape[1]):
            test_files[i][j] = 0.9*test_files[i][j] + 0.1*averageVector[j]
    return test_files
"""-----כבר לא הקוד המגניב-----"""

for i in range(5):
    # zk_App = ZK_attack(malwares.copy())
    # bb_App = BB_attack(malwares.copy(), eclf2)
    # wb_App = WB_attack(malwares.copy(), eclf2, xTrain)
    oa_App = Our_Attack(malwares.copy(), averageApp)
    #Print the resut
    print(Fore.GREEN + f'Loop Number: {i}' + Fore.RESET)
    print(Fore.BLUE + "Original Test:" + Fore.RESET)
    testModel(eclf2, malwares, y_malwares)
    # print(Fore.BLUE + "ZK_attack Test:" + Fore.RESET)
    # testModel(eclf2, zk_App, y_malwares)
    # print(Fore.BLUE + "BB_attack Test:" + Fore.RESET)
    # testModel(eclf2, bb_App, y_malwares)
    # print(Fore.BLUE + "WB_attack Test:" + Fore.RESET)
    # testModel(eclf2, wb_App, y_malwares)
    print(Fore.BLUE + "Our Atack Test:" + Fore.RESET)
    testModel(eclf2, oa_App, y_malwares)
    