import collections
import utility
from collections import Counter
from androguard.core.bytecodes import apk
import os
import hashlib
import json


def extract_features(apkname):
    # apkname = 'DEMO.apk'
    androguard_apk_object = None
    
    static_analysis_dict = collections.OrderedDict()
    try:
        androguard_apk_object = apk.APK(apkname)
        hasher_sha1 = hashlib.sha1()

        with open(apkname, 'rb') as afile:
            buf = afile.read()
            hasher_sha1.update(buf)

        sha1 = hasher_sha1.hexdigest()
        static_analysis_dict["sha1"] = sha1
    except Exception as err:
        print("ERROR in APK: " + str(err))
        return None

    # Package name
    static_analysis_dict['Package name'] = androguard_apk_object.get_package()

    # Permissions
    static_analysis_dict['Permissions'] = androguard_apk_object.get_permissions()

    # Opcodes
    static_analysis_dict['Opcodes'] = utility.opcodes_analysis(androguard_apk_object)
    static_analysis_dict['VersionCode'] = int(androguard_apk_object.get_androidversion_code())


    API_PACKAGES_LIST = []
    API_CLASSES_LIST = []

    package_file = utility.load_file(str('info/package_index.txt'))
    API_PACKAGES_LIST = [x.strip() for x in package_file]

    class_file = utility.load_file(str('info/class_index.txt'))
    API_CLASSES_LIST = [x.strip() for x in class_file]

    list_smali_api_calls, list_smali_strings = utility.read_strings_and_apicalls(apkname, API_PACKAGES_LIST,
                                                                                 API_CLASSES_LIST)

    for api_call in list_smali_api_calls.keys():
        new_api_call = '.'.join(api_call.split(".")[:-1])
        if new_api_call in list_smali_api_calls.keys():
            list_smali_api_calls[new_api_call] = list_smali_api_calls[new_api_call] + list_smali_api_calls[api_call]
        else:
            list_smali_api_calls[new_api_call] = list_smali_api_calls[api_call]
            del list_smali_api_calls[api_call]

    static_analysis_dict['API calls'] = list_smali_api_calls
    static_analysis_dict['Strings'] = Counter(filter(None, list_smali_strings))

    print(static_analysis_dict)

    #appending virustotal features
    vt_apk_path = apkname.replace(DATASET_PATH, 'VT_ANALYSIS')
    vt_apk_path = vt_apk_path.replace('.apk', '.json')

    if os.path.exists(vt_apk_path):
        jsonFeatures = json.load(open(vt_apk_path))

        #appedning virus info
        for scanInfo in jsonFeatures['scans']:
            static_analysis_dict[str(scanInfo)] = jsonFeatures['scans'][str(scanInfo)]['detected']

        static_analysis_dict['vt_total'] = jsonFeatures['total']
        static_analysis_dict['vt_positives'] = jsonFeatures['positives']
    else:
        print(str(vt_apk_path) + ' path not found' )


    return static_analysis_dict
    # dynamic


DATASET_PATH = '/media/dvir/Android_Attac/data'
jsonArr = list()

def extract_data(folderpath, apkpath):
    print('processing..->' + apkpath)
    jsondata = extract_features(os.path.join(folderpath, apkpath))
    if(jsondata == None):
        return None
    if classname == 'malware':
        jsondata['malware'] = True
    else:
        jsondata['malware'] = False
    utility.cleanup(os.path.join(folderpath, apkpath))
    return jsondata


for classname in os.listdir(DATASET_PATH):
    folderpath = os.path.join(DATASET_PATH, classname)
    for apkfilepath in os.listdir(folderpath):
        # print('processing..->' + apkfilepath)
        # jsondata = extract_features(os.path.join(folderpath, apkfilepath))
        # if classname == 'malware':
        #     jsondata['malware'] = True
        # else:
        #     jsondata['malware'] = False
        #
        # utility.cleanup(apkfilepath)
        try:
            jsondata = extract_data(folderpath, apkfilepath)
            if jsondata != None:
                jsonArr.append(jsondata)
                print('No Exception')
        except Exception as err:
            print(err)

utility.save_as_json(jsonArr, '/home/dvir/Desktop/data.json')
utility.save_as_json(jsonArr, 'data.json')