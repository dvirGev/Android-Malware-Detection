import random
import numpy as np
import pickle
from colorama import Fore

xTrain = np.load('result/xTrain.npy')
xTest = np.load('result/xTest.npy')
yTest = np.load('result/yTest.npy')
eclf2 = pickle.load(open('result/eclf2.sav', 'rb'))
def splitMalwerAndBenign():
    benign = []
    malwer = []
    for i in range(len(xTest)):
        if yTest[i] == 1:
            malwer.append(xTest[i])
        else:
            benign.append(xTest[i])

    benign = np.array(benign)
    malwer = np.array(malwer)
    return benign, malwer
def predcit5Times(app):
    for i in range(5):
        score = eclf2.predict(app)[0]
        print(f'Test sample {i} score: {score*100:.2f}% Malwer')

benign, malwer = splitMalwerAndBenign()
y_malwer = np.ones(len(malwer))
# app = malwer[0].reshape(1,-1)
# print(f'Orignal Score: {eclf2.predict(app)[0]*100:.2f}% Malwer')
"""-----עכשיו זה הקוד המגניב-----"""
#This is the implementation of the "first attack"
def ZK_attack(test_files):
    for i in range(test_files.shape[0]):
        for j in range(302):
            ind = random.randint(0, test_files.shape[1]-1)
            f_ind = ind
            s_ind = test_files.shape[1]-1-ind
            # swap test_files[i, f_ind] and test_files[i, s_ind]
            tmp = test_files[i, f_ind]
            test_files[i, f_ind] = test_files[i, s_ind]
            test_files[i, s_ind] = tmp
    return test_files
#This is the implementation of the "second attack"
def BB_attack(test_files,eclf2):
    for i in range(test_files.shape[0]):
        for j in range(302):
            try:
                row = test_files[i,:].copy()
                ind = random.randint(0, test_files.shape[1]-1)
                f_ind = ind
                s_ind = test_files.shape[1]-1-ind
                row[f_ind] = 1
                row[s_ind] = 1
                pred = eclf2.predict(row.reshape(1,-1))
                if pred != 1:
                    test_files[i, :] = row
                    break
            except Exception as e:
                print(i)
                print(e)
                exit(0)
    return test_files
#This is the implementation of the "third attack"
def WB_attack(test_files,clf,X_train):        
    while(1):
        try:
            samp_indices = random.sample(range(X_train.shape[0]), test_files.shape[0])
            samp = X_train[samp_indices]
            pred = clf.predict(samp)
            if (pred==1).mean() <= 0.1:
                return samp
        except Exception as e:
            print(e)
            exit(0)      
    return test_files

# i = 0
# for app in malwer:
#     app = app.reshape(1,-1)
#     print(Fore.RED + f'App Number {i}' + Fore.RESET)
#     app1 = ZK_attack(app)
#     print(Fore.GREEN + 'ZK_attack result:' + Fore.RESET)
#     predcit5Times(app1)

#     app2 = BB_attack(app, eclf2)
#     print(Fore.GREEN + 'BB_attack result:' + Fore.RESET)
#     predcit5Times(app2)


#     app3 = WB_attack(app, eclf2, xTrain)
#     print(Fore.GREEN + 'WB_attack result:' + Fore.RESET)
#     predcit5Times(app3)
"""-----כבר לא הקוד המגניב-----"""
for i in range(5):
    zk_App = np.zeros((len(malwer), len(malwer[0])))
    bb_App = np.zeros((len(malwer), len(malwer[0])))
    wb_App = np.zeros((len(malwer), len(malwer[0])))
    for j  in range(len(malwer)):
        zk_App[j] = ZK_attack(malwer[j].reshape(1,-1))[0]
        bb_App[j] = BB_attack(malwer[j].reshape(1,-1), eclf2)[0]
        zk_App[j] = WB_attack(malwer[j].reshape(1,-1), eclf2, xTrain)[0]
    #Print the resut
    print(Fore.GREEN + f'loop number {i}' + Fore.RESET)
    score = eclf2.score(malwer, y_malwer)
    print(f'Original Score {score*100:.2f}%')
    score = eclf2.score(zk_App, y_malwer)
    print(f'ZK_attack Score {score*100:.2f}%')
    score = eclf2.score(bb_App, y_malwer)
    print(f'BB_attack Score {score*100:.2f}%')
    score = eclf2.score(wb_App, y_malwer)
    print(f'WB_attack Score {score*100:.2f}%')